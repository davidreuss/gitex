#!/bin/bash

USAGE='[--export | --import | --update] [--clone] [--verbose] [<project>]'
LONG_USAGE='
SHORT VERSION: (By popular demand)
----------------------------------

Checkout: gitex -c <project>
Export: gitex -e (in project cloned with gitex)
Update: gitex -u (in project cloned with gitex)

LONG VERSION:
-------------

Options:
-e, --export    Export the project, only works inside a git repository
-i, --import    Import the project
-c, --clone     Make a clone/checkout of project into the current directory
-v, --verbose   Verbose mode, be noisy
-p, --purge     Purge all clones created by gitex

gitex is an attempt to create interoperability between git and cvs

Its purpose is importing a project from CVS into a git repository,
you can clone and work on. After commiting your changes you can export
those back with the same tool, by running gitex with the export option.

To get started:
$ gitex --import <project name>

This will make a fresh checkout/update of the projectname,
where you afterwards can clone from like this:

$ git clone -l $HOME/.gitex/git/<project name> [destination]

As a shortcut, you could also pass the -c | --clone flag to gitex, and it will make
a fresh checkout of <project> into your current working directory

To export changes you have committed you would issue:

$ gitex --export # pushes changes into CVS, for current gitex cloned project

This will in turn, move your changes into the HEAD of
the CVS-repository that was exported from. You can assign a specific branch 
to push into by appending --branch <branchname> when exporting.

Gitex will be nice and show you what it will push, so you can still abort,
if the result is not as you expected.

If no options is given, gitex will assume you want to import newest
sources from CVS <project>.

Short version of this help is available with `gitex --help | head`
'

die() {
    echo >&2 "$@"
    exit 1
}

usage() {
    die "Usage: $0 $USAGE"
}

user=$(whoami)
project_encoding="ISO-8859-1"
run_from=$(pwd)
last_export_tag=$(git config gitex.lastexporttag || echo GITEX_LAST_EXPORT)

action=import
verbose=
clone=
branch=origin
project=$(git config gitex.project) # will give nothing back if not in a git repo

cvsbranch=$(git config gitex.exportbranch || echo HEAD) # Check if user has set a default branch

gitex_cvsroot=$(git config gitex.cvsroot) || die "CVS root not set, please set with git config --global gitex.cvsroot <cvsroot>"
gitex_group=$(git config gitex.group) || die "gitex group not set, please set with git config --global gitex.group <group>"
gitex_home=$(git config gitex.home) || die "gitex home not set, please set with git config --global gitex.home <home>"

umask 002 # make all what we create group writable. Makes it possible to share git/cvs repos

pre_flight() {
    if ! test -d "$gitex_home"; then
        # Try to create it
        if mkdir -p "$gitex_home" >& /dev/null; then
            chgrp "$gitex_group" "$gitex_home"
            # make all newly created files owned by same group
            chmod g+s "$gitex_home" || die "Could not setgid on $gitex_home -- Aborting"
            # create git and cvs directories as well
            mkdir "$gitex_home/cvs" || die "Could not create directory '$gitex_home/cvs -- Aborting"
            mkdir "$gitex_home/git" || die "Could not create directory '$gitex_home/git -- Aborting"
        else
            echo >&2 "ERROR: Could not create directory: $gitex_home"
            echo >&2 "Set git config --global gitex.home to a directory where you have permissions."
            die "Aborting."
        fi
    fi
}

no_changes () {
    git diff-index --quiet --cached HEAD &&
    git diff-files --quiet
}

do_update() {
    # check if we're in a git repository, assume the user has git in PATH
    SUBDIRECTORY_OK=Yes
    . "$(git --exec-path)/git-sh-setup"
    require_work_tree
    cd_to_toplevel

    do_import

    if test "$cvsbranch" = "HEAD"; then
        gitcherry="origin/origin"
        else
        gitcherry=origin/"$cvsbranch"
    fi

    cherry=$(git cherry -v HEAD "$gitcherry")
    if test -n "$cherry"; then
        echo
        echo "The following commits will be pulled into your HEAD"
        echo "---------------------------------------------------"
        echo "$cherry" | while read plusminus commitid message; do
            line=$(git show --quiet --name-only --pretty=oneline --color --abbrev-commit $commitid)
            echo "${plusminus} $line"
        done
    else
        echo "No changes in CVS to import.."
        exit 0
    fi

    sure='N'
    echo
    echo -n "Do you want to update '$project'? (N/y) "
    read sure

    if test "$sure" = "y" -o "$sure" = "Y"; then
        # stash local changes, rebase and reapply the stash
        if ! no_changes; then
            git stash
            git rebase "$gitcherry"
            git stash apply
        else
            git rebase "$gitcherry"
        fi
    fi
}

do_cleanup() {
    rm -f "$lock_file" "$gitex_home/cvs/$project/$cvsbranch/.cvsexportcommit.diff" "$gitex_home/cvs/$project/$cvsbranch/.msg"
    die "Commit: $exportcommit failed applying cleanly. Aborting"
}

do_export() {

    # Trying to fixup a working directory with rebase was essentially stupid
    # as being able to export commits on a dirty tree really shouldn't be exercised.
    # It's enforced here, and we just plain abort, if the user has
    # any local modifications
    if ! no_changes; then
        die "You have local changes in your working directory. Aborting."
    fi

    echo "Exporting '$project' into '$cvsbranch'"
    if test -n "$verbose"; then
        echo "Running import to make sure repository is up to date.."
    fi

    do_import

    # check for newer commits in the "origin", and refuse it users repo is not up-to-date

    if test "$cvsbranch" = "HEAD"; then
        gitcherry="origin/origin"
        else
        gitcherry=origin/"$cvsbranch"
    fi

    cherry=$(git cherry -v HEAD "$gitcherry")
    if test -n "$cherry"; then
        echo "Your repostory is not up-to-date. Please update before exporting your changes."
        exit 0
    fi

    # check if we're in a git repository, assume the user has git in PATH
    SUBDIRECTORY_OK=Yes
    . "$(git --exec-path)/git-sh-setup"
    require_work_tree
    cd_to_toplevel

    git_directory="$PWD/.git"
    export GIT_DIR="$git_directory"

    cvs_project="$gitex_home/cvs/$project"

    if ! test -d "$cvs_project/$cvsbranch"; then
        mkdir -p "$cvs_project/$cvsbranch"
        echo "CVS Checkout of $project ($cvsbranch) doesn't exist.. Creating."
        if test "$cvsbranch" = "HEAD"; then
            cvs -q -d "$gitex_cvsroot" co -d "$cvs_project/$cvsbranch" "$project"
            else
            if ! cvs -q -d "$gitex_cvsroot" co -r"$cvsbranch" -d "$cvs_project/$cvsbranch" "$project"; then
                rm -f "$lock_file"
                rm -r "$cvs_project/$cvsbranch"
                die "Aborting."
            fi
        fi
    fi

    cd "$cvs_project/$cvsbranch"

    if test -n "$verbose"; then
        echo "Updating to newest.."
    fi

    cvs -q upd -dPC &> /dev/null # Revert locally modified also, don't care about output

    if test "$cvsbranch" = "HEAD"; then
        gitcherry="origin/origin"
        else
        gitcherry=origin/"$cvsbranch"
    fi

    to_export=$(git cherry -v "$gitcherry");

    if test -n "$to_export"; then
        echo
        echo "The following commits will be exported"
        echo "--------------------------------------"
        echo "$to_export" | while read plusminus commitid message; do
            line=$(git show --quiet --name-only --pretty=oneline --color --abbrev-commit $commitid)
            echo "${plusminus} $line"
        done
    else
        echo "No commits to export."
        exit 0
    fi

    lock_file="$gitex_home/cvs/.$project-lock"

    if [ -f "$lock_file" ]; then
        echo -n ""
        echo "Someone is already pushing '$project'. Aborting."
        echo "----------------------------------------"
        cat "$lock_file"
        echo "----------------------------------------"
        exit
    fi

    (
        date
        whoami
    ) > "$lock_file"
    chmod 777 "$lock_file"

    sure='N'
    echo
    echo -n "Are you sure that you want to export '$project'? (N/y) "
    read sure

    if ! test "$sure" = "y" -o "$sure" = "Y"; then
        rm -f "$lock_file"
        echo "Export aborted"
        exit 0
    fi

    has_updates="no"
    export_log_file="$gitex_home/cvs/.$project-$cvsbranch-export-$user"
    echo "" > "$export_log_file"
    echo ""
    while read line; do
        exportcommit="$(echo $line | sed -n 's/^+ //p')"
        if test -n "$exportcommit"; then
            has_updates="yes"

            if test -n "$verbose"; then
                if ! git cvsexportcommit -c -p "$exportcommit"; then
                    do_cleanup
                fi
            else
                # Suppress the output of git cvsexportcommit as it can be rather verbose
                commitline=$(git show --quiet --name-only --pretty=oneline --color --abbrev-commit $exportcommit)
                echo -n "Exporting: $commitline"
                if ! git cvsexportcommit -c -p "$exportcommit" >> "$export_log_file" 2>&1; then
                    echo " ... FAILED"
                    echo ""
                    echo "Output from CVS:"
                    echo "----------------"
                    cat "$export_log_file"
                    echo "----------------"
                    do_cleanup
                else
                    echo " ... OK"
                fi
            fi
        fi
    done < <(git cherry "$gitcherry")

    unset GIT_DIR

    if [ "$has_updates" = "yes" ]; then

        echo ""
        echo "All OK."
        echo ""

        cvs -q update -dP &> /dev/null # Do a update once more, for removing any empty folders due to renames
        do_import # Update our cvs remote with newest commits

        cd "$run_from"

        # tag latest "export"
        git tag -f "$last_export_tag"

        # It's safe to reset the hard way, sinces we ensured
        # No local changes was there before export
        # un-added files are kept
        git reset --hard "$gitcherry"
    else
        echo "No updates to import."
    fi

    rm -f "$lock_file"
}

setup_update_hook() {
    cat > "$gitex_home/git/$project/.git/hooks/update" <<EOF
#!/bin/sh
echo     "-------------------------------------------------------------------------------------------"
echo >&2 "ERROR: You cannot push to this repository. Use gitex -e for publishing your changes to CVS."
echo     "-------------------------------------------------------------------------------------------"
exit 1
EOF
    chmod +x "$gitex_home/git/$project/.git/hooks/update"
}

do_import() {

    #CVSUMASK=002
    project_dir="$gitex_home/git/$project"
    echo "Importing newest changes from '$project' ($cvsbranch)"

    first=n
    if ! test -d "$gitex_home/git/$project"; then
        echo "This is a first time import, depending on the size of project, this could take a while."
        first=y
    fi

    if ! git cvsimport -a -i -C "$project_dir" -d "$gitex_cvsroot" "$project"; then
        die "Could not import $project. Aborting"
        rm -rf "$project_dir"
    fi

    cd "$project_dir"

    if test "$first" = "y"; then

        echo "Setting commit encoding to ISO-8859-1" # TODO: Make configurable
        git config i18n.commitencoding "ISO-8859-1"
        git config gitex.project "$project" # Setup the project name, for later retrieval
        setup_update_hook
    fi

    git reset --soft origin # set HEAD to origin
    unset CVSUMASK

    cd "$run_from"
    git fetch --quiet &> /dev/null
}

do_clone() {
    if test -n "$verbose"; then
        echo "Cloning repository $project into $run_from/$project .."
    fi
    git clone "$gitex_home"/git/"$project" "$run_from/$project"
    cd "$run_from"/"$project"
    git config i18n.commitencoding "ISO-8859-1"
    git config gitex.project "$project" # Setup the project name, for later retrieval
}

if test -z "$LONG_USAGE"; then
    LONG_USAGE="Usage: $0 $USAGE"
    else
    LONG_USAGE="Usage: $0 $USAGE

    $LONG_USAGE"
fi

case "$1" in
    -h|--h|--he|--hel|--help)
    echo "$LONG_USAGE"
    exit
esac

while case "$#" in 0) break ;; esac
    do
    case "$1" in
    -v|--verbose)
    verbose=t
    ;;
    --export|-e)
    action=export
    ;;
    --import|-i)
    ;;
    --update|-u)
    action=update
    ;;
    --clone|-c)
    clone=t
    ;;
    --purge|-p)
    if test -d "$gitex_home"; then
        echo -n "Are you sure that you want to purge all projects under '$gitex_home'? (N/y) "
        read sure
        if ! test "$sure" = "y" -o "$sure" = "Y"; then
            die "Purge aborted."
        fi
        echo "Purging all checkouts, and imports.."
        rm -rf "$gitex_home"
        echo "Done."
        exit 0
    else
        die "No gitex clones found. Aborting"
    fi
    ;;
    --branch|-b)
    shift;
    cvsbranch="$1"
    ;;
    -*)
    usage
    ;;
    *)
    break
    ;;
esac
shift
done

case "$#" in
    1)
    project_name="$1"
    # Is this the proper way of finding out what cvs-repos are available?
    if ! test -d "$gitex_cvsroot/$project_name"; then
        die "Project $project_name was not found in CVS root ($gitex_cvsroot)"
    fi
    project="$project_name"
    ;;
    *)
    if test -z "$project"; then
        die "No project was set. Maybe you're not in a git repository?"
    fi
esac

pre_flight

case "$action" in
    export)
    do_export
    ;;
    import)
    do_import
    ;;
    update)
    do_update
    ;;
esac

if test -n "$clone"; then
    do_clone
fi

exit 0
